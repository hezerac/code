
<?php

class Route
{	

    private $uri = [];    	
    
    private $method = [];	
    
    public function get($uri, $method)	
    {		
        $this->uri[] = $uri;
        
        $this->method[] = $method;	
    }	
    
    public function post($uri, $method)  
    {       
        $this->uri[] = $uri;
        
        $this->method[] = $method;  
    }   
    
    public function put($uri, $method)  
    {       
        $this->uri[] = $uri;
        
        $this->method[] = $method;  
    }   
    
    public function delete($uri, $method)  
    {       
        $this->uri[] = $uri;
        
        $this->method[] = $method;  
    }
    
    public function execute()	
    {		
        $uri = isset($_GET['uri']) ? '/' . $_GET['uri'] : '/';		
    
        foreach($this->uri as $key => $value) {
        
            if(strstr($uri, $value)) {
            
                $parts = explode(':', $this->method[$key]);
                
                $controller = new $parts[0]();
                
                $method = $parts[1];
                
                $controller->$method();
            }		
        }	
    }
    
}

//TODO:
//Finish Route
//Controller
//Model

class Connection
{	
    private static $pdo;
    
    public static function established()
    {
        return self::$pdo ?: self::$pdo = new PDO(
            'mysql:host=localhost;dbname=specialdb;charset=utf8mb4',
            'user',
            'pass'
        );
    }
}


class Database
{	

    protected $db = null;	

    public function __construct()	
    {		
        $this->db = Connection::established();
    }	

    public function call($sql, array $params, $isStoredProcedure)
    {
        if($isStoredProcedure) {
            $sql = 'CALL '. $sql .'('. $this->placeholder($params) .')';
        }
        
        $stmt = $this->db->prepare($sql);
        
        $this->bindAll($stmt, $params);
        
        $stmt->execute();
    }	

    private function placeholder($params)	
    {		
        return implode(',', str_replace($params, '?', $params));	
    }	

    private function bindAll($stmt, $params) 
    {		
        foreach($params as $key => $value) {			
            $stmt->bindParam(':$key', $value);		
        }	
    }

}


class RestfulApi 
{   

    private $code = null;   
    
    public function render($data)   
    {       
        header('Content-Type: application/json');
        
        return json_encode(         
            $this->code >= 200 && $this->code <= 299            
                ? $this->success($data) 
                : $this->error($data)); 
     }  
     
     private function success(array $data)  
     {      
        return ['code' => $this->code, 'data' => $data];    
     }  
     
     private function error($message)   
     {      
        return ['error' => ['code' => $this->code, 'message' => $message]]; 
     }  
     
     public function setCode($code) 
     {      
        $this->code = $code;    
     }
     
}



?>

